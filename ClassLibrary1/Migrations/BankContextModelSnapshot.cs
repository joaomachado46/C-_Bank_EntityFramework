// <auto-generated />
using System;
using ClassLibrary1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLibrary1.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ClassLibrary1.Cartao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdTipoDeConta")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroCartao")
                        .HasColumnType("int");

                    b.Property<double>("Saldo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDeConta");

                    b.ToTable("Cartoes");
                });

            modelBuilder.Entity("ClassLibrary1.CartaoTitular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdCartao")
                        .HasColumnType("int");

                    b.Property<int>("IdTitular")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCartao");

                    b.HasIndex("IdTitular");

                    b.ToTable("CartaoTitular");
                });

            modelBuilder.Entity("ClassLibrary1.Emprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdCartao")
                        .HasColumnType("int");

                    b.Property<int?>("IdTitularConta")
                        .HasColumnType("int");

                    b.Property<int>("Mensalidade")
                        .HasColumnType("int");

                    b.Property<int>("NumeroContrato")
                        .HasColumnType("int");

                    b.Property<string>("TipoEmprestimo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCartao");

                    b.HasIndex("IdTitularConta");

                    b.ToTable("Emprestimos");
                });

            modelBuilder.Entity("ClassLibrary1.Movimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartaoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataMovimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Deposito")
                        .HasColumnType("int");

                    b.Property<int>("Levantamento")
                        .HasColumnType("int");

                    b.Property<double>("NovoSaldo")
                        .HasColumnType("float");

                    b.Property<double>("ValorSaldo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CartaoId");

                    b.ToTable("Movimentos");
                });

            modelBuilder.Entity("ClassLibrary1.TipoDeConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NomeConta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoDeContas");
                });

            modelBuilder.Entity("ClassLibrary1.TitularConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Senha")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TitularContas");
                });

            modelBuilder.Entity("ClassLibrary1.Cartao", b =>
                {
                    b.HasOne("ClassLibrary1.TipoDeConta", "TipoDeConta")
                        .WithMany("Cartoes")
                        .HasForeignKey("IdTipoDeConta");

                    b.Navigation("TipoDeConta");
                });

            modelBuilder.Entity("ClassLibrary1.CartaoTitular", b =>
                {
                    b.HasOne("ClassLibrary1.Cartao", "Cartao")
                        .WithMany("CartoesTitulares")
                        .HasForeignKey("IdCartao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary1.TitularConta", "TitularConta")
                        .WithMany("CartoesTitulares")
                        .HasForeignKey("IdTitular")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cartao");

                    b.Navigation("TitularConta");
                });

            modelBuilder.Entity("ClassLibrary1.Emprestimo", b =>
                {
                    b.HasOne("ClassLibrary1.Cartao", "Cartao")
                        .WithMany("Emprestimos")
                        .HasForeignKey("IdCartao");

                    b.HasOne("ClassLibrary1.TitularConta", "TitularConta")
                        .WithMany("Emprestimos")
                        .HasForeignKey("IdTitularConta");

                    b.Navigation("Cartao");

                    b.Navigation("TitularConta");
                });

            modelBuilder.Entity("ClassLibrary1.Movimento", b =>
                {
                    b.HasOne("ClassLibrary1.Cartao", "Cartao")
                        .WithMany("Movimentos")
                        .HasForeignKey("CartaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cartao");
                });

            modelBuilder.Entity("ClassLibrary1.Cartao", b =>
                {
                    b.Navigation("CartoesTitulares");

                    b.Navigation("Emprestimos");

                    b.Navigation("Movimentos");
                });

            modelBuilder.Entity("ClassLibrary1.TipoDeConta", b =>
                {
                    b.Navigation("Cartoes");
                });

            modelBuilder.Entity("ClassLibrary1.TitularConta", b =>
                {
                    b.Navigation("CartoesTitulares");

                    b.Navigation("Emprestimos");
                });
#pragma warning restore 612, 618
        }
    }
}
